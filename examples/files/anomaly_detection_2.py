
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def analyze_anomalies(df):
    """
    Analyzes a DataFrame for various data anomalies and biases.

    Args:
        df (pd.DataFrame): The DataFrame to analyze.  Expected to have columns
                           like 'year', 'country_id', 'Country', 'latitude',
                           'longitude', 'month', 'record_id', and 'day'.

    Returns:
        dict: A dictionary containing anomaly reports for each analysis category.
    """

    anomaly_reports = {}

    # Year Distribution Anomalies
    year_counts = df['year'].value_counts().sort_index()
    anomaly_reports['year_distribution'] = {
        'counts': year_counts.to_dict(),
        'description': "Yearly record counts.  Look for biases or under-representation in earlier or later years."
    }

    # Country-Specific Anomalies
    country_counts = df['Country'].value_counts()
    median_country_count = country_counts.median()
    outlier_countries = country_counts[country_counts > (10 * median_country_count)] #10x higher than median
    anomaly_reports['country_counts'] = {
        'counts': country_counts.to_dict(),
        'outlier_countries': outlier_countries.to_dict(),
        'median_count': median_country_count,
        'description': "Country-specific record counts.  Identify countries with significantly higher or lower record counts."
    }

    # Latitude/Longitude Outliers and Density
    try:
        df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')
        df['longitude'] = pd.to_numeric(df['longitude'], errors='coerce')

        lat_outliers = df[(df['latitude'] < -90) | (df['latitude'] > 90)]
        lon_outliers = df[(df['longitude'] < -180) | (df['longitude'] > 180)]

        # Calculate record density.  Simple approach: count occurrences of each lat/lon pair
        location_counts = df.groupby(['latitude', 'longitude']).size().sort_values(ascending=False)
        top_locations = location_counts.head(10) # top 10 most frequent locations

        anomaly_reports['lat_lon_outliers'] = {
            'latitude_outliers': lat_outliers.to_dict('records'),
            'longitude_outliers': lon_outliers.to_dict('records'),
            'top_locations': top_locations.to_dict(),
            'description': "Latitude/Longitude outliers and high-density locations."
        }

    except KeyError:
        anomaly_reports['lat_lon_outliers'] = {'error': 'Latitude or longitude columns not found.'}


    # Monthly Distribution Anomalies
    month_counts = df['month'].value_counts().sort_index()
    anomaly_reports['monthly_distribution'] = {
        'counts': month_counts.to_dict(),
        'description': "Monthly record counts. Look for significant variations."
    }

    # Data Consistency Issues (country_id vs. Country)
    inconsistent_records = df[df['country_id'].astype(str) != df['Country']] # Basic comparison
    anomaly_reports['country_consistency'] = {
        'inconsistent_records': inconsistent_records.to_dict('records'),
        'description': "Records where country_id and Country fields don't match."
    }

    # Day Value Anomalies
    day_anomalies = df[df['day'] != 1]
    anomaly_reports['day_anomalies'] = {
        'anomalous_records': day_anomalies.to_dict('records'),
        'description': "Records where the 'day' value is not equal to 1."
    }

    # Record ID Gaps
    record_ids = df['record_id'].sort_values().unique()
    id_diffs = np.diff(record_ids)
    large_gaps = id_diffs[id_diffs > 1000]  # Define 'large' as > 1000 (adjust as needed)
    anomaly_reports['record_id_gaps'] = {
        'large_gaps': large_gaps.tolist(),
        'description': "Large gaps in the record_id sequence."
    }

    return anomaly_reports


def visualize_anomalies(anomaly_reports):
    """
    Visualizes anomaly reports, focusing on distributions and counts.

    Args:
        anomaly_reports (dict): The anomaly reports generated by analyze_anomalies().
    """

    # Year Distribution
    if 'year_distribution' in anomaly_reports:
        year_counts = anomaly_reports['year_distribution']['counts']
        plt.figure(figsize=(12, 6))
        plt.bar(year_counts.keys(), year_counts.values())
        plt.xlabel("Year")
        plt.ylabel("Record Count")
        plt.title("Yearly Record Distribution")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        plt.show()

    # Country Distribution
    if 'country_counts' in anomaly_reports:
        country_counts = anomaly_reports['country_counts']['counts']
        # Select a subset of countries for visualization (e.g., top 20)
        top_countries = dict(sorted(country_counts.items(), key=lambda item: item[1], reverse=True)[:20])
        plt.figure(figsize=(12, 6))
        plt.bar(top_countries.keys(), top_countries.values())
        plt.xlabel("Country")
        plt.ylabel("Record Count")
        plt.title("Top Countries Record Distribution")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        plt.show()


    # Monthly Distribution
    if 'monthly_distribution' in anomaly_reports:
        month_counts = anomaly_reports['monthly_distribution']['counts']
        plt.figure(figsize=(8, 5))
        plt.bar(month_counts.keys(), month_counts.values())
        plt.xlabel("Month")
        plt.ylabel("Record Count")
        plt.title("Monthly Record Distribution")
        plt.xticks(range(1, 13))  # Ensure x-ticks are month numbers
        plt.tight_layout()
        plt.show()



if __name__ == '__main__':
    # Example Usage (replace with your actual data loading)
    data = {
        'year': [1900, 1900, 1950, 2000, 2000, 2020, 2023, 2023],
        'country_id': ['USA', 'USA', 'CAN', 'USA', 'MEX', 'USA', 'GBR', 'GBR'],
        'Country': ['USA', 'USA', 'Canada', 'USA', 'Mexico', 'USA', 'UK', 'UK'],
        'latitude': [34.0522, 34.0522, 43.6532, 34.0522, 19.4326, 34.0522, 51.5074, 51.5074],
        'longitude': [-118.2437, -118.2437, -79.3832, -118.2437, -99.1332, -118.2437, 0.1278, 0.1278],
        'month': [1, 2, 3, 4, 5, 6, 7, 8],
        'record_id': [1, 2, 3, 4, 5, 6, 7, 8],
        'day': [1, 1, 1, 1, 1, 1, 1, 2]
    }

    df = pd.DataFrame(data)
    anomaly_reports = analyze_anomalies(df)

    # Print the reports (for detailed inspection)
    import json
    print(json.dumps(anomaly_reports, indent=4))

    # Visualize the reports
    visualize_anomalies(anomaly_reports)
